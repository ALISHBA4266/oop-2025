#include<iostream>
#include<cmath>
using namespace std;

class Complex {
    int real, imag;
    friend Complex operator+(Complex, Complex);
    friend Complex operator-(Complex, Complex);
    friend Complex operator*(Complex, Complex);
    friend Complex operator/(Complex, Complex);
    friend ostream& operator<<(ostream&, const Complex&);
    friend double magnitude(Complex);

public:
    Complex() : real(0), imag(0) {}
    Complex(int a, int b) : real(a), imag(b) {}
};

Complex operator+(Complex a, Complex b) {
    return Complex(a.real + b.real, a.imag + b.imag);
}

Complex operator-(Complex a, Complex b) {
    return Complex(a.real - b.real, a.imag - b.imag);
}

Complex operator*(Complex a, Complex b) {
    int realPart = a.real * b.real - a.imag * b.imag;
    int imagPart = a.real * b.imag + a.imag * b.real;
    return Complex(realPart, imagPart);
}

Complex operator/(Complex a, Complex b) {
    int denom = b.real * b.real + b.imag * b.imag;
    int realPart = (a.real * b.real + a.imag * b.imag) / denom;
    int imagPart = (a.imag * b.real - a.real * b.imag) / denom;
    return Complex(realPart, imagPart);
}

ostream& operator<<(ostream& out, const Complex& c) {
    out << "(" << c.real << " + " << c.imag << "i)";
    return out;
}

double magnitude(Complex c) {
    return sqrt(c.real * c.real + c.imag * c.imag);
}

int main() {
    Complex a(4, 3), b(2, 1);
    Complex c;

    c = a + b;
    cout << "Sum: " << c << endl;

    c = a - b;
    cout << "Difference: " << c << endl;

    c = a * b;
    cout << "Product: " << c << endl;

    c = a / b;
    cout << "Quotient: " << c << endl;

    cout << "Magnitude of a: " << magnitude(a) << endl;
    cout << "Magnitude of b: " << magnitude(b) << endl;

    return 0;
}
