#include <iostream>
using namespace std;

class Matrix2x2;

class MatrixHelper {
public:
    void updateElement(Matrix2x2& m, int row, int col, int value);
};

class Matrix2x2 {
private:
    int a11, a12, a21, a22;

public:
    Matrix2x2(int x11 = 0, int x12 = 0, int x21 = 0, int x22 = 0) {
        a11 = x11; a12 = x12;
        a21 = x21; a22 = x22;
    }

    Matrix2x2 operator+(const Matrix2x2& m) {
        return Matrix2x2(a11 + m.a11, a12 + m.a12, a21 + m.a21, a22 + m.a22);
    }

    Matrix2x2 operator-(const Matrix2x2& m) {
        return Matrix2x2(a11 - m.a11, a12 - m.a12, a21 - m.a21, a22 - m.a22);
    }

    Matrix2x2 operator*(const Matrix2x2& m) {
        return Matrix2x2(
            a11 * m.a11 + a12 * m.a21,
            a11 * m.a12 + a12 * m.a22,
            a21 * m.a11 + a22 * m.a21,
            a21 * m.a12 + a22 * m.a22
        );
    }

    friend int determinant(const Matrix2x2& m);
    friend ostream& operator<<(ostream& out, const Matrix2x2& m);
    friend class MatrixHelper;
};

int determinant(const Matrix2x2& m) {
    return m.a11 * m.a22 - m.a12 * m.a21;
}

ostream& operator<<(ostream& out, const Matrix2x2& m) {
    out << m.a11 << " " << m.a12 << endl;
    out << m.a21 << " " << m.a22 << endl;
    return out;
}

void MatrixHelper::updateElement(Matrix2x2& m, int row, int col, int value) {
    if (row == 0 && col == 0) m.a11 = value;
    else if (row == 0 && col == 1) m.a12 = value;
    else if (row == 1 && col == 0) m.a21 = value;
    else if (row == 1 && col == 1) m.a22 = value;
}

int main() {
    Matrix2x2 m1(1, 2, 3, 4);
    Matrix2x2 m2(5, 6, 7, 8);

    Matrix2x2 sum = m1 + m2;
    Matrix2x2 diff = m1 - m2;
    Matrix2x2 prod = m1 * m2;

    cout << "Matrix 1:\n" << m1;
    cout << "Matrix 2:\n" << m2;
    cout << "Sum:\n" << sum;
    cout << "Difference:\n" << diff;
    cout << "Product:\n" << prod;
    cout << "Determinant of Matrix 1: " << determinant(m1) << endl;

    MatrixHelper helper;
    helper.updateElement(m1, 0, 0, 10);
    cout << "Updated Matrix 1:\n" << m1;

    return 0;
}
